name: Deploy to AWS
on:
  push:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Terraform Format
        run: |
          cd terraform
          terraform init
          terraform fmt 
          terraform validate

      - name: Terraform Validate
        run: |
          cd terraform
          terraform init
          terraform validate

  plan:
    needs: validate
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform init
          terraform plan
          
      # - name: Parse Plan
      #   run: |
      #     jq -r '([.resource_changes[].change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' tfplan.json

  apply:
    needs: plan
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-ids: ${{ vars.AWS_ACCOUNT }}
          
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flaskdemo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve 
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster flask-app-tf-cluster \
            --service flask-app-tf-service \
            --force-new-deployment \
            --region eu-north-1

  destroy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Terraform Destroy
        run: |
          cd terraform
          terraform init
          terraform destroy -auto-approve