name: Deploy to AWS
on:
  push:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          
      - name: Terraform Validate
        run: |
          cd terraform
          terraform init
          terraform fmt 
          terraform validate

  deploy:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-ids: ${{ vars.AWS_ACCOUNT }}
          
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flaskdemo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Import existing resources
        run: |
          cd terraform
          terraform init
          terraform import aws_ecr_repository.app flaskdemo
          terraform import aws_lb.main arn:aws:elasticloadbalancing:eu-north-1:303981612052:loadbalancer/app/flask-app-tf-alb/eac5bc396eeebb8d
          terraform import aws_lb_target_group.app arn:aws:elasticloadbalancing:eu-north-1:303981612052:targetgroup/flask-app-tf-tg/ee96aad8dbcbc16d
        
          
      - name: Deploy infrastructure with Terraform
        run: |
          cd terraform
          terraform init
          terraform plan
          terraform apply -auto-approve
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster flask-app-tf-cluster \
            --service flask-app-tf-service \
            --force-new-deployment \
            --region eu-north-1

  # plan:
  #   needs: validate
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   steps:
  #     - uses: actions/checkout@v2]

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ vars.AWS_REGION }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: latest
          
  #     - name: Install jq
  #       run: sudo apt-get install -y jq
          
  #     - name: Terraform Plan
  #       run: |
  #         cd terraform
  #         terraform init
  #         terraform plan -out=${{ env.PLAN }}
  #         terraform show -json ${{ env.PLAN }} > ${{ env.JSON_PLAN_FILE }}
          
  #     - name: Parse Plan
  #       run: |
  #         jq -r '([.resource_changes[].change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' ${{ env.JSON_PLAN_FILE }}

  # apply:
  #   needs: plan
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ vars.AWS_REGION }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: latest
          
  #     - name: Terraform Apply
  #       run: |
  #         cd terraform
  #         terraform init
  #         terraform apply -auto-approve ${{ env.PLAN }}

  # destroy:
  #   if: github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: latest
          
  #     - name: Terraform Destroy
  #       run: |
  #         cd terraform
  #         terraform init
  #         terraform destroy -auto-approve